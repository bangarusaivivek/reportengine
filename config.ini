[staging]
clickhouse-host=sky1-int.staging.keeboot.com
clickhouse-database=use keeboot
redis-host=infra-int.staging.keeboot.com
redis-port=6380
redis-password=kbreport
host=sky2-int.staging.keeboot.com
mysql-host=infra-int.staging.keeboot.com

[production]
clickhouse-host=ch-ap1-a-1.indiakb.com
clickhouse-database=use keeboot
redis-host=redrep-ap1-a-1.indiakb.com
redis-port=6380
redis-password=kbreport
host=rep-ap1-a-1.indiakb.com
mysql-host=mysql-ap1-a-1.indiakb.com
mysql-host-bull=mysql-ap1-a-2.indiakb.com

[qe]
clickhouse-host=sky1-int.qe.keeboot.com
clickhouse-database=use keeboot
redis-host=infra-int.qe.keeboot.com
redis-port=6380
redis-password=kbreport
host=sky1-int.qe.keeboot.com
mysql-host=infra-int.qe.keeboot.com

[dev]
clickhouse-host=sky1-int.dev.keeboot.com
clickhouse-database=use keeboot
redis-host=infra-int.dev.keeboot.com
redis-port=6380
redis-password=kbreport
host=sky1-int.dev.keeboot.com 
mysql-host=infra-int.dev.keeboot.com

#DEF is null for line and pie chart
#DEF is bar for bar chart

[reports]
#table
[reports.40000]
query = select tenantId,customers,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),count(tripId),sum(freightRate) from keeboot.trip where tenantId='?' and startDateTime is not Null and endDateTime is not null group by tenantId,customers,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)) 
dfcolumns=["tenantId","customers","year","month","trips","freightRate"]
dictColumns=["customers","year","month","trips","freightRate"]
DEF=[{"headerName":"customers","field":"customers"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"trips","field":"trips"},{"headerName":"freightRate","field":"freightRate"}]
type=table

#table
[reports.40001]
query=select tenantId,vehicle,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),count(tripId),sum(freightRate) from keeboot.trip where tenantId='?' and startDateTime is not Null and endDateTime is not null group by tenantId,vehicle,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime))
dfcolumns=['tenantId','vehicle','year','month','trips','freightRate']
dictColumns=['vehicle','year','month','trips','freightRate']
DEF=[{"headerName":"vehicle","field":"vehicle"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"trips","field":"trips"},{"headerName":"freightRate","field":"freightRate"}]
type=table

#table
[reports.40002]
query=select tenantId,driver,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),count(tripId),sum(freightRate) from keeboot.trip where tenantId='?' and startDateTime is not Null and endDateTime is not null group by tenantId,driver,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime))
dfcolumns=['tenantId','driver','year','month','trips','freightRate']
dictColumns=['driver','year','month','trips','freightRate']
DEF=[{"headerName":"driver","field":"driver"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"trips","field":"trips"},{"headerName":"freightRate","field":"freightRate"}]
type=table

#line
[reports.40004]
query=select tenantId,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),count(tripId) from keeboot.trip  where tenantId='?' and toYear(toDateTime(createdTime)) = toYear(now()) and startDateTime is not Null and endDateTime is not null group by tenantId,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime))
dfcolumns=['tenantId','year','month','trips']
zip1=month
zip2=trips
DEF=line
type=line

#all trips
[reports.40009]
query=select tenantId,tripId,fromLocationShortCode,toLocationShortCode,customers,vehicle,driver,groupName,tripIndentRequestedBy,tripIndentDateAndTime,multiIf(isModified ==0,'False','True'),tripInvoice,startOdometer,endOdometer,multiIf((isNull(endOdometer) OR isNull(startOdometer)),totalDistance,toFloat64(endOdometer-startOdometer)),toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),toString(toDate(toDateTime(createdTime))),replaceRegexpOne(multiIf(match(startDateTime,'\\-[0-9]{2}'),startDateTime,replaceRegexpAll(startDateTime, '\\-', '\\-0')),'\\ .*',''),replaceRegexpOne(multiIf(match(endDateTime,'\\-[0-9]{2}'),endDateTime,replaceRegexpAll(endDateTime, '\\-', '\\-0')),'\\ .*',''),weight,volume,freightRate,loading,unloading,halting,tripExpenses from keeboot.trip where tenantId='?' and startDateTime is not Null and endDateTime is not null order by createdTime desc
dfcolumns=['tenantId','tripId','fromLocationShortCode','toLocationShortCode','customers','vehicle','driver','branch','tripIndentRequestedBy','tripIndentDateAndTime','modified','tripInvoice','startOdometer','endOdometer','totalDistance','year','month','createdDate','startDateTime','endDateTime','weight','volume','freightRate','loading','unloading','halting','tripExpenses']
dictColumns=['tripId','fromLocationShortCode','toLocationShortCode','customers','vehicle','driver','branch','tripIndentRequestedBy','tripIndentDateAndTime','modified','tripInvoice','startOdometer','endOdometer','totalDistance','year','month','createdDate','startDateTime','endDateTime','weight','volume','freightRate','loading','unloading','halting','tripExpenses']
DEF=[{"headerName":"Trip Id","field":"tripId"},{"headerName":"From","field":"fromLocationShortCode"},{"headerName":"To","field":"toLocationShortCode"},{"headerName":"Customer","field":"customers"},{"headerName":"Vehicle","field":"vehicle"},{"headerName":"Driver","field":"driver"},{"headerName":"Branch","field":"branch"},{"headerName":"Indent Requested By","field":"tripIndentRequestedBy"},{"headerName":"Indent Date & Time","field":"tripIndentDateAndTime"},{"headerName":"Modified","field":"modified"},{"headerName":"Trip Invoice","field":"tripInvoice"},{"headerName":"Start Odometer","field":"startOdometer"},{"headerName":"End Odometer","field":"endOdometer"},{"headerName":"KM's","field":"totalDistance"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"Trip Created","field":"createdDate"},{"headerName":"Trip Start","field":"startDateTime"},{"headerName":"Trip End","field":"endDateTime"},{"headerName":"Weight","field":"weight"},{"headerName":"Volume","field":"volume"},{"headerName":"Rate","field":"freightRate"},{"headerName":"Loading","field":"loading"},{"headerName":"Unloading","field":"unloading"},{"headerName":"Halting","field":"halting"},{"headerName":"Trip Expenses","field":"tripExpenses"}]
db=clickhouse
type=table

#customer wise P&L
[reports.80000]
query=select tenantId,customers,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),count(vehicle) as truckplaced,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and  createdTime is not null and customers is not null and vehicle is not null  group by tenantId,customers,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)) having truckplaced is not null and  (truckplaced > 0 or totalRevenue > 0 or profitOrLossAmount > 0)
dfcolumns=['tenantId','customer','year','month','truckPlaced','totalRevenue','profitOrLossAmount']
dictColumns=['customer','year','month','truckPlaced','totalRevenue','profitOrLossAmount']
DEF=[{"headerName":"Customer Name","field":"customer"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"Trucks Placed","field":"truckPlaced"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#truck wise P&L
[reports.80001]
query=select tenantId,vehicle,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and createdTime is not null and vehicle is not null  group by tenantId,vehicle,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)) having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0)
dfcolumns=['tenantId','vehicle','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
dictColumns=['vehicle','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
DEF=[{"headerName":"Vehicle Number","field":"vehicle"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Cost","field":"totalExpenditure"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#Route wise P&L
[reports.80002]
query=select tenantId,fromLocationShortCode,toLocationShortCode,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue))as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and  fromLocationShortCode is not null and toLocationShortCode is not null and createdTime is not null group by tenantId,fromLocationShortCode,toLocationShortCode,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)) having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0)
dfcolumns=['tenantId','fromLocationShortCode','toLocationShortCode','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
dictColumns=['fromLocationShortCode','toLocationShortCode','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
DEF=[{"headerName":"Origin","field":"fromLocationShortCode"},{"headerName":"Destination","field":"toLocationShortCode"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Cost","field":"totalExpenditure"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#Truck Type wise P&L
[reports.80003]
query=select tenantId,trimBoth(vehicleType),toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)),multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip  where tenantId='?' and createdTime is not null and vehicleType IS NOT NULL  group by tenantId,vehicleType,toYear(toDateTime(createdTime)),toMonth(toDateTime(createdTime)) having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0)
dfcolumns=['tenantId','vehicleType','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
dictColumns=['vehicleType','year','month','totalRevenue','totalExpenditure','profitOrLossAmount']
DEF=[{"headerName":"Truck Type","field":"vehicleType"},{"headerName":"Year","field":"year"},{"headerName":"Month","field":"month"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Cost","field":"totalExpenditure"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#Top 10 customers 
[reports.80004]
query=select tenantId,customers,count(vehicle) as truckplaced,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount  from keeboot.trip where tenantId='?' and customers is not null and vehicle is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,customers having (truckplaced > 0 or totalRevenue>0 or profitOrLossAmount>0) order by profitOrLossAmount desc limit 10
dfcolumns=['tenantId','customer','truckPlaced','totalRevenue','profitOrLossAmount']
dictColumns=['customer','truckPlaced','totalRevenue','profitOrLossAmount']
DEF=[{"headerName":"Customer Name","field":"customer"},{"headerName":"Trucks Placed","field":"truckPlaced"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#top 10 routes
[reports.80005]
query=select tenantId,fromLocationShortCode,toLocationShortCode,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and fromLocationShortCode is not null and toLocationShortCode is not null  group by tenantId,fromLocationShortCode,toLocationShortCode having (totalRevenue>0 or totalExpenditure>0  or profitOrLossAmount>0)  order by profitOrLossAmount desc limit 10
dfcolumns=['tenantId','fromLocationShortCode','toLocationShortCode','totalRevenue','totalExpenditure','profitOrLossAmount']
dictColumns=['fromLocationShortCode','toLocationShortCode','totalRevenue','totalExpenditure','profitOrLossAmount']
DEF=[{"headerName":"Origin","field":"fromLocationShortCode"},{"headerName":"Destination","field":"toLocationShortCode"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Cost","field":"totalExpenditure"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#Top 10 Drivers
[reports.80006]
query=select tenantId,driver,count(vehicle) as trips,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount  from keeboot.trip where tenantId='?' and driver is not null and vehicle is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,driver having (trips>0 or totalRevenue>0 or profitOrLossAmount>0) order by trips desc limit 10
dfcolumns=['tenantId','driver','trips','totalRevenue','profitOrLossAmount']
dictColumns=['driver','trips','totalRevenue','profitOrLossAmount']
DEF=[{"headerName":"Driver Name","field":"driver"},{"headerName":"Trips","field":"trips"},{"headerName":"Revenue in Rupees","field":"totalRevenue"},{"headerName":"Profit","field":"profitOrLossAmount"}]
db=clickhouse
type=table

#Top 10 empty vehicle routes
[reports.80009]
query=select tenantId, substring(fromLocationShortCode,1,position(fromLocationShortCode,',')-1) as from , substring(toLocationShortCode,1,position(toLocationShortCode,',')-1) as to ,count(*) as trips from keeboot.trip where tenantId='?' and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and createdTime is not null and fromLocationShortCode IS NOT NULL and toLocationShortCode IS NOT NULL and emptyRun IS NOT NULL and emptyRun>0 group by tenantId,from,to limit 10
dfcolumns=['tenantId','Origin','Destination','Trips']
dictColumns=['Origin','Destination','Trips']
DEF=[{"headerName":"Origin","field":"Origin"},{"headerName":"Destination","field":"Destination"},{"headerName":"Trips","field":"Trips"}]
db=clickhouse
type=table

#customer wise P&L BAR
[reports.90000]
query=select tenantId,customers,count(vehicle) as truckplaced,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and  toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and createdTime is not null group by tenantId,customers having (truckplaced > 0 or totalRevenue > 0 or profitOrLossAmount > 0) order by profitOrLossAmount desc limit 10
dfcolumns=['tenantId','Customer','TruckPlaced','TotalRevenue','ProfitOrLossAmount']
dictColumns=['Customer','TruckPlaced','TotalRevenue','ProfitOrLossAmount']
DEF=bar
x=['TruckPlaced','TotalRevenue','ProfitOrLossAmount']
y=['Customer']
db=clickhouse
type=bar

#truck wise P&L BAR
[reports.90001]
query=select tenantId,vehicle,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip where tenantId='?' and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and createdTime is not null group by tenantId,vehicle having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0) order by profitOrLossAmount desc limit 10
dfcolumns=['tenantId','Vehicle','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
dictColumns=['Vehicle','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
x=['TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
y=['Vehicle']
DEF=bar
db=clickhouse
type=bar

#Route wise P&L BAR
[reports.90002]
query=select tenantId,concat(substring(fromLocationShortCode,1,position(fromLocationShortCode,',')-1) ,'->', substring(toLocationShortCode,1,position(toLocationShortCode,',')-1) ) as route ,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount  from keeboot.trip where tenantId='?' and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and createdTime is not null and fromLocationShortCode IS NOT NULL and toLocationShortCode IS NOT NULL group by tenantId,route having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0) order by profitOrLossAmount desc limit 10
dfcolumns=['tenantId','Route','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
dictColumns=['Route','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
x=['TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
y=['Route']
DEF=bar
db=clickhouse
type=bar

#Truck Type wise P&L BAR
[reports.90003]
query=select tenantId,trimBoth(vehicleType) as vehicleType,multiIf(isNull(sum(totalRevenue)),0,sum(totalRevenue)) as totalRevenue,multiIf(isNull(sum(totalExpenditure)),0,sum(totalExpenditure)) as totalExpenditure,multiIf(isNull(sum(profitOrLossAmount)),0,sum(profitOrLossAmount)) as profitOrLossAmount from keeboot.trip  where tenantId='?' and createdTime is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and vehicleType IS NOT NULL group by tenantId,vehicleType having (totalRevenue >0 or totalExpenditure >0 or profitOrLossAmount>0)
dfcolumns=['tenantId','VehicleType','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
dictColumns=['VehicleType','TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
x=['VehicleType']
y=['TotalRevenue','TotalExpenditure','ProfitOrLossAmount']
DEF=bar
db=clickhouse
type=bar

#Month wise revenue in ruppees BAR
[reports.90013]
query=select multiIf(isNull(B.tenantId),'?',B.tenantId) as tenantId, A.number as month,multiIf(isNull(B.totalRevenue),0,B.totalRevenue) as totalRevenue from  (select * from numbers(1,12) ) as A LEFT JOIN (select tenantId,toUInt64(toMonth(toDateTime(createdTime))) as month,sum(totalRevenue) as totalRevenue from keeboot.trip where tenantId='?' and createdTime is not null and toYear(toDateTime(createdTime))=toYear(now()) group by tenantId,month)  as B on A.number=B.month
dfcolumns=['tenantId','Month','TotalRevenue']
dictColumns=['Month','TotalRevenue']
x=['Month']
y=['TotalRevenue']
DEF=bar
db=clickhouse
type=bar

#Month wise revenue and profit BAR
[reports.90014]
query=select multiIf(isNull(B.tenantId),'?',B.tenantId),A.number as month,multiIf(isNull(B.totalRevenue),0,B.totalRevenue),multiIf(isNull(B.profitOrLossAmount),0,B.profitOrLossAmount) from (select * from numbers(1,12)) as A LEFT JOIN  (select tenantId,toUInt64(toMonth(toDateTime(createdTime))) as month,sum(totalRevenue) as totalRevenue,sum(profitOrLossAmount) as profitOrLossAmount from keeboot.trip where tenantId='?' and toYear(toDateTime(createdTime))=toYear(now()) and createdTime is not null group by tenantId,month) as B ON A.number=B.month
dfcolumns=['tenantId','Month','TotalRevenue','ProfitOrLossAmount']
dictColumns=['Month','TotalRevenue','ProfitOrLossAmount']
x=['Month']
y=['TotalRevenue','ProfitOrLossAmount']
DEF=bar
db=clickhouse
type=bar

#Month wise truck placed Line chart
[reports.90012]
query=select multiIf(isNull(B.tenantId),'?',B.tenantId) as tenantId,A.number as month,multiIf(isNull(B.truckPlaced),0,B.truckPlaced) as truckPlaced from    (select * from numbers(1,12) ) as A LEFT JOIN (select tenantId,toUInt64(toMonth(toDateTime(createdTime))) as month,count(vehicle) as truckPlaced from keeboot.trip where tenantId='?' and toYear(toDateTime(createdTime))=toYear(now()) and createdTime is not null and vehicle is not null group by tenantId,month) as B ON A.number=B .month
dfcolumns=['tenantId','Month','TruckPlaced']
dictColumns=['Month','TruckPlaced']
x=['Month']
y=['TruckPlaced']
DEF=line
db=clickhouse
type=line

#Top 10 customers trucks placed pie chart
[reports.90004]
query=select tenantId,customers,count(vehicle) as truckPlaced from keeboot.trip where tenantId='?' and createdTime is not null and customers is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and vehicle is not null group by tenantId,customers order by truckPlaced desc limit 10
dfcolumns=['tenantId','customers','truckPlaced']
dictColumns=['customers','truckPlaced']
x=['customers']
y=['truckPlaced']
DEF=pie
db=clickhouse
type=pie

#Top 10 customers revenue pie chart
[reports.90005]
query=select tenantId,customers,sum(totalRevenue) as revenue from keeboot.trip where tenantId='?' and createdTime is not null and customers is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,customers order by revenue desc limit 10
dfcolumns=['tenantId','customers','revenue']
dictColumns=['customers','revenue']
x=['customers']
y=['revenue']
DEF=pie
db=clickhouse
type=pie

#Top 10 customers profit pie chart
[reports.90006]
query=select tenantId,customers,sum(profitOrLossAmount) as profit from keeboot.trip where tenantId='?' and createdTime is not null and customers is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,customers order by profit desc limit 10
dfcolumns=['tenantId','customers','profit']
dictColumns=['customers','profit']
x=['customers']
y=['profit']
DEF=pie
db=clickhouse
type=pie
#Top 10 driver trips pie chart
[reports.90009]
query=select tenantId,driver,count(tripId) as trips from keeboot.trip where tenantId='?' and createdTime is not null and driver is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and tripId is not null group by tenantId,driver order by trips desc limit 10
dfcolumns=['tenantId','driver','trips']
dictColumns=['driver','trips']
x=['driver']
y=['trips']
DEF=pie
db=clickhouse
type=pie

#Top 10 driver revenue in rupees pie chart
[reports.90010]
query=select tenantId,driver,sum(totalRevenue) as revenue from keeboot.trip where tenantId='?' and createdTime is not null and driver is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,driver order by revenue desc limit 10
dfcolumns=['tenantId','driver','revenue']
dictColumns=['driver','revenue']
x=['driver']
y=['revenue']
DEF=pie
db=clickhouse
type=pie

#Top 10 driver profit pie chart
[reports.90011]
query=select tenantId,driver,sum(profitOrLossAmount) as profit from keeboot.trip where tenantId='?' and createdTime is not null and driver is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) group by tenantId,driver order by profit desc limit 10
dfcolumns=['tenantId','driver','profit']
dictColumns=['driver','profit']
x=['driver']
y=['profit']
DEF=pie
db=clickhouse
type=pie

#Top 10 route revenue pie chart
[reports.90007]
query=select tenantId,concat(substring(fromLocationShortCode,1,position(fromLocationShortCode,',')-1) ,'->', substring(toLocationShortCode,1,position(toLocationShortCode,',')-1) ) as route,sum(totalRevenue) as revenue  from keeboot.trip where tenantId='?' and createdTime is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and fromLocationShortCode is not null and toLocationShortCode is not null group by tenantId,route order by revenue desc limit 10
dfcolumns=['tenantId','route','revenue']
dictColumns=['route','revenue']
x=['route']
y=['revenue']
DEF=pie
db=clickhouse
type=pie

#Top 10 route profit pie chart
[reports.90008]
query=select tenantId,concat(substring(fromLocationShortCode,1,position(fromLocationShortCode,',')-1) ,'->', substring(toLocationShortCode,1,position(toLocationShortCode,',')-1) ) as route,sum(profitOrLossAmount) as profit  from keeboot.trip where tenantId='?' and createdTime is not null and toDate(toDateTime(createdTime)) > toDate(now() - 31557600) and fromLocationShortCode is not null and toLocationShortCode is not null group by tenantId,route order by profit desc limit 10
dfcolumns=['tenantId','route','profit']
dictColumns=['route','profit']
x=['route']
y=['profit']
DEF=pie
db=clickhouse
type=pie

#enquiry reports
[reports.90018]
query=SELECT A.tenant_id,A.enquiries,B.total_conversions,B.trucks_placed,B.profit FROM(select  kb_enquiry.enquiries.tenant_id AS tenant_id,count(kb_enquiry.enquiries.t_sl_no) as enquiries from kb_enquiry.enquiries where tenant_id='?' group by tenant_id ) AS A LEFT JOIN(SELECT kb_booking.bookings.tenant_id AS tenant_id,CAST(COUNT(*) AS UNSIGNED) AS total_conversions,CAST(COUNT(*) AS UNSIGNED) AS trucks_placed,SUM(kb_enquiry.enquiries.customer_rate -kb_enquiry.supplier_rates.supplier_rate) AS profit FROM kb_booking.bookings INNER JOIN  kb_enquiry.supplier_rates ON kb_booking.bookings.reference_id = kb_enquiry.supplier_rates.id  INNER JOIN kb_enquiry.enquiries ON  kb_enquiry.enquiries.id = kb_enquiry.supplier_rates.reference_id WHERE kb_booking.bookings.tenant_id='?' AND kb_enquiry.enquiries.customer_rate IS NOT NULL AND kb_enquiry.supplier_rates.supplier_rate is not null GROUP BY kb_booking.bookings.tenant_id) AS B ON A.tenant_id=B.tenant_id
dfcolumns=['tenantId','TotalEnquiries','TotalConversions','TotalTrucksPlaced','TotalProfit']
dictColumns=['TotalEnquiries','TotalConversions','TotalTrucksPlaced','TotalProfit']
x=['TotalConversions','TotalTrucksPlaced','Total Profit']
y=['TotalEnquiries']
DEF=bar
db=mysql
type=bar

# total trips for driver for last 3 months week wise
[reports.300000]
query=SELECT date(created_ts) as datee ,count(trip_id) as trips FROM bull.trip_driver where driver_id='?' and date(created_ts) > (date(now())- INTERVAL 6 Month) and trip_id is not null group by datee
dfcolumns=['date','Trips']
x=['date']
y=['Trips']
DEF=line
db=mysql
type=line
trip_type=new

#local trips list 2.0

[reports.400000]
query=SELECT A.tenant_id,A.trip_disp_id,A.from_location,A.to_location,A.customer_name,A.trip_type,A.trip_tribe,A.route_name,A.vehicle_number,A.driver_name,A.branch,A.start_odometer,A.end_odometer,A.total_distance,A.created_ts,A.start_date_time,A.end_date_time,A.total_duration,B.Rate,B.Loading,B.Unloading,B.Halting FROM (SELECT tenant_id,trip_id,trip_disp_id,from_location,to_location,customer_name,trip_type,IF(trip_tribe = 2, 'Local', '') AS trip_tribe,route_name,vehicle_number,driver_name,branch_name AS branch,start_odometer,end_odometer,IFNULL(total_distance, end_odometer - start_odometer) AS total_distance,CONVERT( DATE(created_ts) , CHAR) AS created_ts, CONVERT( start_date_time , CHAR) AS start_date_time,CONVERT( end_date_time , CHAR) AS end_date_time,total_duration FROM bull.local_trips_list WHERE tenant_id = '?' AND trip_tribe = 2 AND trip_status >= 400 ORDER BY created_ts DESC) AS A LEFT JOIN (SELECT trip_id,SUM(IF(particulars = 'Loading', IFNULL(amount, rate * quantity), 0)) AS Loading,SUM(IF(particulars = 'Unloading', IFNULL(amount, rate * quantity), 0)) AS Unloading,SUM(IF(particulars = 'Halting', IFNULL(amount, rate * quantity), 0)) AS Halting,SUM(IF(particulars LIKE 'Rate %%', IFNULL(amount, rate * quantity), 0)) AS Rate FROM bull.trip_customer_rates GROUP BY trip_id) AS B ON A.trip_id = B.trip_id ORDER BY created_ts DESC
dfcolumns=['tenantId','tripId','start_point','end_point','customer','contract_type','trip_type','route','vehicle','driver','branch','startOdometer','endOdometer','kms','trip_created','trip_start','trip_end','total_time','rate','loading','unloading','halting']
dictColumns=['tripId','start_point','end_point','customer','contract_type','trip_type','route','vehicle','driver','branch','startOdometer','endOdometer','kms','trip_created','trip_start','trip_end','total_time','rate','loading','unloading','halting']
DEF=[{"headerName":"Trip Id","field":"tripId"},{"headerName":"Start Point","field":"start_point"},{"headerName":"End Point","field":"end_point"},{"headerName":"Customer","field":"customer"},{"headerName":"Contract Type","field":"contract_type"},{"headerName":"Order/Trip Type","field":"trip_type"},{"headerName":"Route name/no.","field":"route"},{"headerName":"Vehicle","field":"vehicle"},{"headerName":"Driver","field":"driver"},{"headerName":"Branch","field":"branch"},{"headerName":"Start Odometer","field":"startOdometer"},{"headerName":"End Odometer","field":"endOdometer"},{"headerName":"KM's","field":"kms"},{"headerName":"Trip Created","field":"trip_created"},{"headerName":"Trip Start","field":"trip_start"},{"headerName":"Trip End","field":"trip_end"},{"headerName":"Total Time","field":"total_time"},{"headerName":"Rate","field":"rate"},{"headerName":"Loading","field":"loading"},{"headerName":"Unloading","field":"unloading"},{"headerName":"Halting","field":"halting"}]
db=mysql
type=table
trip_type=new

#attached trips list 2.0
[reports.400001]
query=SELECT tenant_id,trip_disp_id,customer_name,vehicle_number,driver_name,branch_name,CONVERT( start_date_time , CHAR) AS start_date_time,CONVERT( end_date_time , CHAR) AS end_date_time,committed_distance,committed_duration,total_distance,total_duration FROM bull.attached_trips_list WHERE bull.attached_trips_list.tenant_id = '?'  ORDER BY bull.attached_trips_list.created_ts DESC
dfcolumns=['tenantId','tripId','customer','vehicle','driver','branch','start_date','end_date','committed_distance','committed_duration','total_distance','total_duration']
dictColumns=['tripId','customer','vehicle','driver','branch','start_date','end_date','committed_distance','committed_duration','total_distance','total_duration']
DEF=[{"headerName":"Trip Id","field":"tripId"},{"headerName":"Customer","field":"customer"},{"headerName":"Vehicle","field":"vehicle"},{"headerName":"Driver","field":"driver"},{"headerName":"Branch","field":"branch"},{"headerName":"Trip Start Date","field":"start_date"},{"headerName":"Trip End Date","field":"end_date"},{"headerName":"Committed KM","field":"committed_distance"},{"headerName":"Committed Hours","field":"committed_duration"},{"headerName":"Run KM","field":"total_distance"},{"headerName":"Run Hours","field":"total_duration"}]
db=mysql
type=table
trip_type=new

#Attached trips tripssheet list 2.0
[reports.400002]
query=SELECT bull.trip.tenant_id,bull.trip.trip_disp_id,serial_no AS tripsheet_no,if(start_location_address="[object Object]",null,start_location_address) as start_location_address,if(end_location_address="[object Object]",null,end_location_address) as end_location_address,convert(start_date_time,CHAR) as start_date_time,convert(end_date_time,CHAR) as end_date_time,total_time,start_odometer,end_odometer,IFNULL(total_distance,end_odometer - start_odometer) AS total_distance FROM bull.attached_trip_sheet INNER JOIN bull.trip ON bull.attached_trip_sheet.trip_id=bull.trip.trip_id WHERE bull.trip.tenant_id='?' ORDER BY bull.trip.created_ts DESC,tripsheet_no ASC
dfcolumns=['tenantId','tripId','tripsheet_no','start_location_address','end_location_address','start_date_time','end_date_time','total_time','start_odometer','end_odometer','total_distance']
dictColumns=['tripId','tripsheet_no','start_location_address','end_location_address','start_date_time','end_date_time','total_time','start_odometer','end_odometer','total_distance']
DEF=[{"headerName":"Trip Id","field":"tripId"},{"headerName":"Serial Number","field":"tripsheet_no"},{"headerName":"Start Location","field":"start_location_address"},{"headerName":"End Location","field":"end_location_address"},{"headerName":"Trip sheet start date & Time","field":"start_date_time"},{"headerName":"Trip sheet End date & Time","field":"end_date_time"},{"headerName":"Total Hours","field":"total_time"},{"headerName":"Opening Odometer","field":"start_odometer"},{"headerName":"Closing Odometer","field":"end_odometer"},{"headerName":"Total KM","field":"total_distance"}]
db=mysql
type=table
trip_type=new

#Attached customerwise trips reports 
[reports.400003]
query=SELECT A.tenant_id,A.customer_name,A.trip_type,A.contract_start,A.contract_end,B.trucks,C.revenue, C.revenue-ifnull(D.vendor_rate,0) as profit_loss_amount FROM (SELECT bull.trip.tenant_id as tenant_id,bull.trip_customer.trip_id AS trip_id,bull.trip_customer.customer_name as customer_name,IF(bull.trip.trip_tribe = 1, 'Attached', '') AS trip_type,convert(bull.attached_trip.contract_start_date,CHAR) AS contract_start,convert(bull.attached_trip.contract_end_date,CHAR) AS contract_end FROM bull.trip_customer INNER JOIN bull.trip ON bull.trip_customer.trip_id = bull.trip.trip_id INNER JOIN bull.attached_trip ON bull.trip_customer.trip_id = bull.attached_trip.trip_id WHERE bull.trip.tenant_id = '?' AND bull.trip.trip_tribe = 1 AND bull.trip_customer.customer_name IS NOT NULL) AS A INNER JOIN (SELECT trip_id, COUNT(vehicle_id) AS trucks FROM bull.trip_vehicle GROUP BY trip_id) AS B ON A.trip_id = B.trip_id LEFT JOIN (SELECT trip_id, SUM(IFNULL(amount, rate * quantity)) AS revenue FROM bull.trip_customer_rates GROUP BY trip_id) AS C ON A.trip_id=C.trip_id LEFT JOIN (SELECT trip_id, SUM(IFNULL(amount, rate * quantity)) AS vendor_rate FROM bull.trip_vendor_rates GROUP BY trip_id) AS D ON A.trip_id=D.trip_id
dfcolumns=['tenantId','customer','trip_type','contract_start','contract_end','trucks','revenue','profit_loss_Amount']
dictColumns=['customer','trip_type','contract_start','contract_end','trucks','revenue','profit_loss_Amount']
DEF=[{"headerName":"Customer Name","field":"customer"},{"headerName":"Trip Type","field":"trip_type"},{"headerName":"Contract start Date","field":"contract_start"},{"headerName":"Contract end Date","field":"contract_end"},{"headerName":"No. of Trucks Attached","field":"trucks"},{"headerName":"Revenue in Rupees","field":"revenue"},{"headerName":"Profit & Loss amt","field":"profit_loss_Amount"}]
db=mysql
type=table
trip_type=new

#Vehicle wise trips
[reports.400004]
query=SELECT A.tenant_id as tenant_id,A.vehicle_number as vehicle_number,A.vehicle_type as vehicle_type,A.ownership_type as ownership_type,COUNT(A.trip_id) as trips,SUM(IFNULL(B.revenue,0)) as revenue,SUM(IFNULL(C.cost,0)) as cost,SUM(IFNULL(B.revenue,0))-SUM(IFNULL(C.cost,0)) as profit_loss FROM (SELECT tenant_id,trip_disp_id,bull.trip_vehicle.trip_id AS trip_id,vehicle_number,vehicle_type,ownership_type,is_used_in_trip,bull.trip_vehicle.created_ts FROM bull.trip_vehicle  INNER JOIN bull.trip ON bull.trip_vehicle.trip_id = bull.trip.trip_id WHERE tenant_id = '?' AND is_used_in_trip=1 AND bull.trip_vehicle.created_ts IN (SELECT MIN(bull.trip_vehicle.created_ts) FROM bull.trip_vehicle GROUP BY trip_id)) AS A LEFT JOIN (SELECT trip_id, SUM(IFNULL(amount, rate * quantity)) AS revenue FROM bull.trip_customer_rates GROUP BY trip_id) AS B ON A.trip_id = B.trip_id LEFT JOIN (SELECT trip_id,SUM(IFNULL(amount, rate * quantity)) AS cost FROM bull.trip_vendor_rates GROUP BY trip_id) AS C ON A.trip_id = C.trip_id WHERE vehicle_number IS NOT NULL GROUP BY tenant_id,vehicle_number,vehicle_type,ownership_type
dfcolumns=['tenantId','vehicle_number','vehicle_type','ownership_type','trips','revenue','cost','profit_loss_Amount']
dictColumns=['vehicle_number','vehicle_type','ownership_type','trips','revenue','cost','profit_loss_Amount']
DEF=[{"headerName":"Vehicle Number","field":"vehicle_number"},{"headerName":"Type of vehicle","field":"vehicle_type"},{"headerName":"Ownership type","field":"ownership_type"},{"headerName":"No. of trips","field":"trips"},{"headerName":"Revenue in Rupees","field":"revenue"},{"headerName":"Cost","field":"cost"},{"headerName":"Profit & Loss amt","field":"profit_loss_Amount"}]
db=mysql
type=table
trip_type=new

#vehicletype wise trips
[reports.400005]
query=SELECT A.tenant_id as tenant_id,A.vehicle_type as vehicle_type,A.ownership_type as ownership_type,COUNT(A.trip_id) as trips,SUM(IFNULL(B.revenue,0)) as revenue,SUM(IFNULL(C.cost,0)) as cost,SUM(IFNULL(B.revenue,0))-SUM(IFNULL(C.cost,0)) as profit_loss FROM (SELECT tenant_id,trip_disp_id,bull.trip_vehicle.trip_id AS trip_id,vehicle_number,vehicle_type,ownership_type,is_used_in_trip,bull.trip_vehicle.created_ts FROM bull.trip_vehicle  INNER JOIN bull.trip ON bull.trip_vehicle.trip_id = bull.trip.trip_id WHERE tenant_id = '?' AND is_used_in_trip=1 AND bull.trip_vehicle.created_ts IN (SELECT MIN(bull.trip_vehicle.created_ts) FROM bull.trip_vehicle GROUP BY trip_id)) AS A LEFT JOIN (SELECT trip_id, SUM(IFNULL(amount, rate * quantity)) AS revenue FROM bull.trip_customer_rates GROUP BY trip_id) AS B ON A.trip_id = B.trip_id LEFT JOIN (SELECT trip_id,SUM(IFNULL(amount, rate * quantity)) AS cost FROM bull.trip_vendor_rates GROUP BY trip_id) AS C ON A.trip_id = C.trip_id WHERE vehicle_number IS NOT NULL GROUP BY tenant_id,vehicle_type,ownership_type
dfcolumns=['tenantId','vehicle_type','ownership_type','trips','revenue','cost','profit_loss_Amount']
dictColumns=['vehicle_type','ownership_type','trips','revenue','cost','profit_loss_Amount']
DEF=[{"headerName":"Type of vehicle","field":"vehicle_type"},{"headerName":"Ownership type","field":"ownership_type"},{"headerName":"No. of trips","field":"trips"},{"headerName":"Revenue in Rupees","field":"revenue"},{"headerName":"Cost","field":"cost"},{"headerName":"Profit & Loss amt","field":"profit_loss_Amount"}]
db=mysql 
type=table
trip_type=new

#FTL trip report
[reports.400006]
query=SELECT trip_detail.tenant_id,trip_detail.trip_disp_id,trip_detail.from_location,trip_detail.to_location,trip_detail.customer_name,trip_detail.order_type,trip_detail.trip_type,trip_detail.vehicle_number,trip_detail.driver_name,trip_detail.branch_name,trip_detail.lr_number,trip_detail.created_ts,trip_detail.start_date_time,trip_detail.end_date_time,trip_detail.weight,trip_detail.volume,trip_rates.Rate,trip_rates.Loading,trip_rates.Unloading,trip_rates.Halting FROM (SELECT tenant_id,trip_id,trip_disp_id,from_location,to_location,customer_name,IF(trip_tribe = 3, 'FTL', '') AS order_type,trip_type,vehicle_number,driver_name,booking_branch_name AS branch_name,lr_number,CONVERT( DATE(created_ts) , CHAR) AS created_ts,CONVERT( start_date_time , CHAR) AS start_date_time,CONVERT( end_date_time , CHAR) AS end_date_time,weight,volume FROM bull.ftl_trips_list WHERE tenant_id = '?' AND trip_status >= 400 ORDER BY created_ts DESC) AS trip_detail LEFT JOIN (SELECT trip_id,SUM(IF(particulars = 'Loading', IFNULL(amount, rate * quantity), 0)) AS Loading,SUM(IF(particulars = 'Unloading', IFNULL(amount, rate * quantity), 0)) AS Unloading,SUM(IF(particulars = 'Halting', IFNULL(amount, rate * quantity), 0)) AS Halting,SUM(IF(particulars LIKE 'Rate %%', IFNULL(amount, rate * quantity), 0)) AS Rate FROM bull.trip_customer_rates GROUP BY trip_id) AS trip_rates ON trip_detail.trip_id = trip_rates.trip_id
dfcolumns=['tenantId','trip_id','from','to','customer','order_type','contract_type','vehicle','driver','branch','lr_number','trip_created','trip_start','trip_end','weight','volume','rate','loading','unloading','halting']  
dictColumns=['trip_id','from','to','customer','order_type','contract_type','vehicle','driver','branch','lr_number','trip_created','trip_start','trip_end','weight','volume','rate','loading','unloading','halting']
DEF=[{"headerName":"Trip Id","field":"trip_id"},{"headerName":"From","field":"from"},{"headerName":"To","field":"to"},{"headerName":"Customer","field":"customer"},{"headerName":"Order Type","field":"order_type"},{"headerName":"Contract Type","field":"contract_type"},{"headerName":"Vehicle","field":"vehicle"},{"headerName":"Driver","field":"driver"},{"headerName":"Branch","field":"branch"},{"headerName":"LR No.","field":"lr_number"},{"headerName":"Trip Created","field":"trip_created"},{"headerName":"Trip Start","field":"trip_start"},{"headerName":"Trip End","field":"trip_end"},{"headerName":"Weight","field":"weight"},{"headerName":"Volume","field":"volume"},{"headerName":"Rate","field":"rate"},{"headerName":"Loading","field":"loading"},{"headerName":"Unloading","field":"unloading"},{"headerName":"Halting","field":"halting"}]
db=mysql
type=table
trip_type=new

#Local trip customerwise report
[reports.400007]
query=SELECT trip_detail.tenant_id as tenant_id,trip_detail.customer_name as customer_name,trip_detail.trip_tribe as trip_tribe,count(trip_detail.trip_id) AS trucks,SUM(trip_revenue.revenue) AS revenue,SUM(trip_revenue.revenue-ifnull(trip_expense.expense,0)) AS profit_loss FROM (SELECT tenant_id,customer_name,bull.trip.trip_id as trip_id,IF(trip_tribe = 2, 'Local', '') AS trip_tribe FROM bull.trip INNER JOIN bull.trip_customer ON bull.trip.trip_id = bull.trip_customer.trip_id WHERE tenant_id = '?' AND trip_tribe = 2 AND customer_name IS NOT NULL) AS trip_detail LEFT JOIN (SELECT  trip_id,SUM(IFNULL(amount,rate*quantity)) AS revenue FROM bull.trip_customer_rates GROUP BY trip_id) AS trip_revenue ON trip_detail.trip_id=trip_revenue.trip_id LEFT JOIN (SELECT trip_id,SUM(IFNULL(amount,rate*quantity)) AS expense FROM bull.trip_vendor_rates GROUP BY trip_id) AS trip_expense ON trip_detail.trip_id=trip_expense.trip_id GROUP BY tenant_id,customer_name,trip_tribe
dfcolumns=['tenantId','customer','trip_type','trucks','revenue','profit_loss_Amount']
dictColumns=['customer','trip_type','trucks','revenue','profit_loss_Amount']
DEF=[{"headerName":"Customer Name","field":"customer"},{"headerName":"Trip Type","field":"trip_type"},{"headerName":"Trucks Placed","field":"trucks"},{"headerName":"Revenue in Rupees","field":"revenue"},{"headerName":"Profit & Loss amt","field":"profit_loss_Amount"}]
db=mysql
type=table
trip_type=new

#driver wise reports
[reports.400008]
query=select F.tenant_id,F.driver_name,F.ownership_type,F.trips,F.revenue,F.profit_loss FROM (SELECT D.tenant_id as tenant_id,D.driver_id as driver_id,D.driver_name as driver_name,D.ownership_type as ownership_type,count(D.trip_id) as trips,sum(ifnull(DR.revenue,0)) as revenue,sum(ifnull(DR.revenue,0)-ifnull(DE.expense,0)) as profit_loss FROM (SELECT tenant_id,bull.trip_driver.trip_id as trip_id, driver_id, driver_name, ownership_type FROM bull.trip_driver INNER JOIN bull.trip ON bull.trip_driver.trip_id=bull.trip.trip_id WHERE is_primary = 1 and tenant_id='?')AS D LEFT JOIN (SELECT trip_id,SUM(IFNULL(amount,rate*quantity)) AS revenue FROM bull.trip_customer_rates GROUP BY trip_id)AS DR ON D.trip_id=DR.trip_id LEFT JOIN (SELECT trip_id,SUM(IFNULL(amount,rate*quantity)) AS expense FROM bull.trip_vendor_rates GROUP BY trip_id) AS DE ON D.trip_id=DE.trip_id where driver_id is not null and driver_name is not null GROUP BY tenant_id,driver_id,driver_name,ownership_type) AS F
dfcolumns=['tenantId','driver','ownership_type','trips','revenue','profit_loss_Amount']
dictColumns=['driver','ownership_type','trips','revenue','profit_loss_Amount']
DEF=[{"headerName":"Driver Name","field":"driver"},{"headerName":"Ownership Type","field":"ownership_type"},{"headerName":"Trips","field":"trips"},{"headerName":"Revenue in Rupees","field":"revenue"},{"headerName":"Profit & Loss amt","field":"profit_loss_Amount"}]
db=mysql
type=table
trip_type=new

#lsd report
[reports.500000]
query=SELECT t.tenant_id,CONVERT(DATE(t.created_ts),CHAR) AS created_ts,t.trip_disp_id,IF(t.trip_tribe = 2, 'Local', '') AS trip_tribe,t.vehicle_number as vehicle_number,t.vehicle_type as vehicle_type,t.driver_name as driver_name,t.mobile_number as driver_number,t.customer_name as customer_name,t.route_name as route_name,t.from_location as from_location,t.to_location as to_location,t.vehicle_ownership_type as ownership,t.custom_field_1 as custom_field_1,t.custom_field_2 as custom_field_2,t.custom_field_3 as custom_field_3,t.custom_field_4 as custom_field_4,(SELECT b1.consignment_weight FROM local_trip_location b1   WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS consignment_weight1,(SELECT b1.consignment_volume FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS consignment_volume1,(SELECT b1.no_of_packages FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS no_of_packages1,(SELECT b1.custom_field_1 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS custom_field_11,       (SELECT b1.custom_field_2 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS custom_field_21,(SELECT b1.custom_field_3 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS custom_field_31,(SELECT b1.custom_field_4 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1)  AS custom_field_41,(SELECT b1.custom_field_5 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 0,1 ) AS custom_field_51,(SELECT b1.consignment_weight FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1)  AS consignment_weight2,(SELECT b1.consignment_volume FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS consignment_volume2,(SELECT b1.no_of_packages FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS no_of_packages2,(SELECT b1.custom_field_1 FROM local_trip_location b1         WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS custom_field_12,(SELECT b1.custom_field_2 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS custom_field_22,(SELECT b1.custom_field_3 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS custom_field_32,(SELECT b1.custom_field_4 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS custom_field_42,(SELECT b1.custom_field_5 FROM local_trip_location b1 WHERE b1.trip_id = t.trip_id  and b1.planned_task = 2 ORDER BY b1.trip_id LIMIT 1,1) AS custom_field_52  FROM local_trips_list t  WHERE t.tenant_id = '?'  ORDER BY t.created_ts DESC
dfcolumns=['tenantId','created_ts','trip_disp_id','trip_tribe','vehicle_number','vehicle_type','driver_name','driver_number','customer_name','route_name','from_location','to_location','ownership','custom_field_1','custom_field_2','custom_field_3','custom_field_4','consignment_weight1','consignment_volume1','no_of_packages1','custom_field_11','custom_field_21','custom_field_31','custom_field_41','custom_field_51','consignment_weight2','consignment_volume2','no_of_packages2','custom_field_12','custom_field_22','custom_field_32','custom_field_42','custom_field_52']
dictColumns=['created_ts','trip_disp_id','trip_tribe','vehicle_number','vehicle_type','driver_name','driver_number','customer_name','route_name','from_location','to_location','ownership','custom_field_1','custom_field_2','custom_field_3','custom_field_4','consignment_weight1','consignment_volume1','no_of_packages1','custom_field_11','custom_field_21','custom_field_31','custom_field_41','custom_field_51','consignment_weight2','consignment_volume2','no_of_packages2','custom_field_12','custom_field_22','custom_field_32','custom_field_42','custom_field_52']
DEF=[{"headerName":"DATE","field":"created_ts"},{"headerName":"TRIP ID","field":"trip_disp_id"},{"headerName":"TRIP CREATION","field":"trip_tribe"},{"headerName":"VEH.NO.","field":"vehicle_number"},{"headerName":"VEHICLE TYPE","field":"vehicle_type"},{"headerName":"DRIVER NAME","field":"driver_name"},{"headerName":"DRIVER MOBILE NO","field":"driver_number"},{"headerName":"CUSTOMER","field":"customer_name"},{"headerName":"Route name","field":"route_name"},{"headerName":"ORIGIN","field":"from_location"},{"headerName":"DESTINATION","field":"to_location"},{"headerName":"OWNERSHIP TYPE","field":"ownership"},{"headerName":"CUSTOM FIELD 1","field":"custom_field_1"},{"headerName":"CUSTOM FIELD 2","field":"custom_field_2"},{"headerName":"CUSTOM FIELD 3","field":"custom_field_3"},{"headerName":"CUSTOM FIELD 4","field":"custom_field_4"},{"headerName":"CONSIGNMENT WEIGHT 1","field":"consignment_weight1"},{"headerName":"CONSIGNMENT VOULME 1","field":"consignment_volume1"},{"headerName":"NO OF PACKAGES 1","field":"no_of_packages1"},{"headerName":"LR 1","field":"custom_field_11"},{"headerName":"GATEPASS 1","field":"custom_field_21"},{"headerName":"LR DATE 1","field":"custom_field_31"},{"headerName":"LOADING 1","field":"custom_field_41"},{"headerName":"UNLOADING 1","field":"custom_field_51"},{"headerName":"CONSIGNMENT WEIGHT 2","field":"consignment_weight2"},{"headerName":"CONSIGNMENT VOULME 2","field":"consignment_volume2"},{"headerName":"NO OF PACKAGES 2","field":"no_of_packages2"},{"headerName":"LR 2","field":"custom_field_12"},{"headerName":"GATEPASS 2","field":"custom_field_22"},{"headerName":"LR DATE 2","field":"custom_field_32"},{"headerName":"LOADING 2","field":"custom_field_42"},{"headerName":"UNLOADING 2","field":"custom_field_52"}]
db=mysql
type=table
trip_type=new

#local_trip performance report
[reports.500001]
query=SELECT t.tenant_id AS tenant_id,t.trip_disp_id as trip_disp_id,t.customer_name as customer_name,t.route_name as route_name,t.from_location as from_location,t.to_location as to_location,t.vehicle_number as vehicle_number,t.created_ts as created_ts,CONVERT( fl.out_datetime , CHAR) AS from_location_out_datetime,CONVERT( il.intermediate1_in_datetime , CHAR) AS intermediate1_in_datetime,CONVERT( il.intermediate1_out_datetime , CHAR) AS intermediate1_out_datetime,CONVERT( il.intermediate2_in_datetime , CHAR) AS intermediate2_in_datetime,CONVERT( il.intermediate2_out_datetime , CHAR) AS intermediate2_out_datetime,CONVERT( il.intermediate3_in_datetime , CHAR) AS intermediate3_in_datetime,CONVERT( il.intermediate3_out_datetime , CHAR) AS intermediate3_out_datetime,CONVERT( tl.in_datetime , CHAR) AS to_location_in_datetime,CONVERT( TIMEDIFF(tl.in_datetime, fl.out_datetime) , CHAR) AS total_time,CONVERT( SEC_TO_TIME(TIME_TO_SEC(TIMEDIFF(intermediate1_out_datetime,intermediate1_in_datetime)) + IFNULL(TIME_TO_SEC(TIMEDIFF(intermediate2_out_datetime,intermediate2_in_datetime)),0) + IFNULL(TIME_TO_SEC(TIMEDIFF(intermediate3_out_datetime,intermediate3_in_datetime)),0)) , CHAR) AS wastage_time,CONVERT( IFNULL(SEC_TO_TIME(TIME_TO_SEC(TIMEDIFF(tl.in_datetime, fl.out_datetime)) - (TIME_TO_SEC(TIMEDIFF(intermediate1_out_datetime,intermediate1_in_datetime)) + IFNULL(TIME_TO_SEC(TIMEDIFF(intermediate2_out_datetime,intermediate2_in_datetime)),0) + IFNULL(TIME_TO_SEC(TIMEDIFF(intermediate3_out_datetime,intermediate3_in_datetime)),0))),TIMEDIFF(tl.in_datetime, fl.out_datetime)) , CHAR) AS running_time FROM (SELECT tenant_id,trip_id,trip_disp_id,customer_name,route_name,from_location,to_location,vehicle_number,CONVERT( DATE(created_ts),CHAR) AS created_ts  FROM bull.local_trips_list  WHERE trip_status >= 400 AND tenant_id='?') AS t   LEFT JOIN (SELECT A.trip_id AS trip_id,A.serial_no AS serial_no,B.location_name AS location_name,B.out_datetime AS out_datetime FROM (SELECT  trip_id, MIN(location_serial_no) AS serial_no FROM bull.local_trip_location WHERE task_status = 2 GROUP BY trip_id) AS A LEFT JOIN (SELECT  trip_id, location_name, out_datetime, location_serial_no FROM bull.local_trip_location) AS B ON A.trip_id = B.trip_id  AND A.serial_no = B.location_serial_no) AS fl ON t.trip_id = fl.trip_id LEFT JOIN (SELECT  A.trip_id AS trip_id,A.serial_no AS serial_no,B.location_name AS location_name,B.in_datetime AS in_datetime FROM (SELECT  trip_id, MAX(location_serial_no) AS serial_no FROM  bull.local_trip_location WHERE task_status = 3 GROUP BY trip_id) AS A     LEFT JOIN (SELECT trip_id, location_name, in_datetime, location_serial_no FROM bull.local_trip_location) AS B ON A.trip_id = B.trip_id AND A.serial_no = B.location_serial_no) AS tl ON t.trip_id = tl.trip_id  LEFT JOIN  (SELECT t.trip_id,(SELECT  in_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 0 , 1) AS intermediate1_in_datetime,(SELECT out_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 0 , 1) AS intermediate1_out_datetime,(SELECT in_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 1 , 1) AS intermediate2_in_datetime, (SELECT out_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 1 , 1) AS intermediate2_out_datetime,(SELECT in_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 2 , 1) AS intermediate3_in_datetime,(SELECT  out_datetime FROM bull.local_trip_location tl WHERE tl.trip_id = t.trip_id AND tl.task_status = 6 ORDER BY tl.trip_id LIMIT 2 , 1) AS intermediate3_out_datetime FROM bull.local_trips_list t) AS il ON t.trip_id = il.trip_id ORDER BY created_ts DESC
dfcolumns=['tenantId','trip_disp_id','customer_name','route_name','from_location','to_location','vehicle_number','created_ts','from_location_out_datetime','intermediate1_in_datetime','intermediate1_out_datetime','intermediate2_in_datetime','intermediate2_out_datetime','intermediate3_in_datetime','intermediate3_out_datetime','to_location_in_datetime','total_time','wastage_time','running_time']
dictColumns=['trip_disp_id','customer_name','route_name','from_location','to_location','vehicle_number','created_ts','from_location_out_datetime','intermediate1_in_datetime','intermediate1_out_datetime','intermediate2_in_datetime','intermediate2_out_datetime','intermediate3_in_datetime','intermediate3_out_datetime','to_location_in_datetime','total_time','wastage_time','running_time']
DEF=[{"headerName":"Trip Id","field":"trip_disp_id"},{"headerName":"Customer","field":"customer_name"},{"headerName":"Route Name","field":"route_name"},{"headerName":"From Location","field":"from_location"},{"headerName":"To Location","field":"to_location"},{"headerName":"Vehicle","field":"vehicle_number"},{"headerName":"Date","field":"created_ts"},{"headerName":"From Location Out Time","field":"from_location_out_datetime"},{"headerName":"Intermediate 1 In Time","field":"intermediate1_in_datetime"},{"headerName":"Intermediate 1 Out Time","field":"intermediate1_out_datetime"},{"headerName":"Intermediate 2 In Time","field":"intermediate2_in_datetime"},{"headerName":"Intermediate 2 Out Time","field":"intermediate2_out_datetime"},{"headerName":"Intermediate 3 In Time","field":"intermediate3_in_datetime"},{"headerName":"Intermediate 3 Out Time","field":"intermediate3_out_datetime"},{"headerName":"To Location In Time","field":"to_location_in_datetime"},{"headerName":"Total Time","field":"total_time"},{"headerName":"Wastage Time","field":"wastage_time"},{"headerName":"Running time","field":"running_time"}]
db=mysql
type=table
trip_type=new

#NINJA REPORTS
#vehicle wise
[reports.500]
query=select concat(tenantId,'-',vehicle) as vehicle,sum(totalDistance) as distance  from keeboot.trip where tenantId='?' and vehicle is not null group by vehicle 
dfcolumns=['vehicle','totalDistance']
zip1=vehicle
zip2=totalDistance
DEF=Ninja
db=clickhouse

#vehicleType wise
[reports.501]
query=select concat(tenantId,'-',vehicleType) as vehicleType,sum(totalDistance) as distance  from keeboot.trip where tenantId='?' and vehicleType is not null group by vehicleType 
dfcolumns=['vehicleType','totalDistance']
zip1=vehicleType
zip2=totalDistance
DEF=Ninja
db=clickhouse

#routewise totaldistance
[reports.502]
query= select concat(tenantId,'#',substring(fromLocationShortCode,1,position(fromLocationShortCode,',')-1) ,'->', substring(toLocationShortCode,1,position(toLocationShortCode,',')-1) ) as route,sum(totalDistance) from keeboot.trip where tenantId='?' and fromLocationShortCode is not null and toLocationShortCode is not null group by route
dfcolumns=['route','totalDistance']
zip1=route
zip2=totalDistance
DEF=Ninja
db=clickhouse

#selecting unique tenants 
[unique]
[unique.tenants]
clickhousequery=select distinct(tenantId) from keeboot.trip
mysqlquery=SELECT DISTINCT(kb_enquiry.enquiries.tenant_id) AS tenant_id FROM kb_enquiry.enquiries

#reports in tenant level
[IDS]
[IDS.reportids]
ids=[40009,80000,80001,80002,80003,80004,80005,80006,80009,90000,90001,90002,90003,90013,400000,400001,400002,400003,400004,400005,400006,400007,400008,500000,500001]

[IDS.driverreportids]
ids=[300000]

#reports in global level
[ninja]
[ninja.reportids]
ids=[500,501,502]



